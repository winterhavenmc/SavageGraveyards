@startuml
' === GLOBAL STYLING ===
skinparam backgroundColor #f9f9f9
skinparam shadowing true
skinparam roundCorner 15
skinparam ArrowColor #444444
skinparam ArrowThickness 1.2
skinparam ArrowFontSize 11
skinparam packageTitleFontSize 14
skinparam classFontName "Helvetica"
skinparam classAttributeIconSize 0
skinparam class {
  BackgroundColor white
  BorderColor #888888
}

' stereotype coloring
skinparam class {
  BackgroundColor<<controller>> LightBlue
  BackgroundColor<<controller-port>> Azure
  BackgroundColor<<manager>> Lavender
  BackgroundColor<<worker>> Lavender
  BackgroundColor<<port>> Beige
  BackgroundColor<<repository>> #EBF7E3
  BackgroundColor<<repository-adapter>> Khaki
  BackgroundColor<<entity>> #e9f9ff
  BackgroundColor<<entity-valid>> #e6ffe6
  BackgroundColor<<entity-invalid>> #ffe6e6
}

' === PACKAGES ===
package winterhavenmc #ececec {
    package savagegraveyards #d8d8d8 {
        ' --- Bootstrap classes ---
        package bootstrap #ffffff {
            class Bootstrap <<manager>> {
                #   commandManager: CommandManager
                #   connectionProvider: ConnectionProvider
                #   discoveryObserver: DiscoveryObserver
                #   playerEventListener: PlayerEventListener
                #   pluginController: PluginController
                #   safetyManager: SafetyManager
                ---
                + onDisable()
                + onEnable()
            }
        }

        ' --- Core classes ---
        package core #ffffff {
            package controller {
                interface PluginController <<controller-port>> {
                    + shutDown()
                    + startUp(plugin: JavaPlugin, connectionProvider: ConnectionProvider, commandManager: CommandManager, playerEventListener: PlayerEventListener, discoveryObserver: DiscoveryObserver, safetyManager: SafetyManager)
                }

                class SavageGraveyardsPluginController <<controller>> {
                    + commandManager: CommandManager
                    + datastore: ConnectionProvider
                    + discoveryObserver: DiscoveryObserver
                    + messageBuilder: MessageBuilder
                    + playerEventListener: PlayerEventListener
                    + safetyManager: SafetyManager
                    + soundConfig: SoundConfiguration
                    + worldManager: WorldManager
                    --
                    + shutDown()
                    + startUp(plugin: JavaPlugin, connectionProvider: ConnectionProvider, commandManager: CommandManager, playerEventListener: PlayerEventListener, discoveryObserver: DiscoveryObserver, safetyManager: SafetyManager)
                }
            }

            package ports #ffffff {
                interface CommandManager <<port>> {
                    + create(): CommandManager
                	+ init(ctx: CommandContextContainer): CommandManager
                }

                interface PlayerEventListener <<port>> {
                    + create(): PlayerEventListener
                    + init(ctx: ListenerContextContainer): PlayerEventListener
                }

                interface ConnectionProvider <<port>> {
                    + connect(): ConnectionProvider
                    + graveyards(): GraveyardRepository
                    + discoveries(): DiscoveryRepository
                    + close()

                }

                interface DiscoveryRepository <<port>> {
                  + save(discovery: ValidDiscovery): boolean
                  + saveAll(discoveries: Collection<ValidDiscovery>): int
                  + delete(searchKey: ValidSearchKey, playerUid: UUID): boolean
                }
                interface GraveyardRepository <<port>> {
                    + save(graveyard: ValidGraveyard): Graveyard
                    + saveAll(graveyards: Collection<ValidGraveyard>): int
                    + update(graveyard: ValidGraveyard): Graveyard
                    + update(oldSearchKey: ValidSearchKey, graveyard: ValidGraveyard): Graveyard
                    + delete(searchKey: ValidSearchKey): Graveyard
                    + get(searchKey: ValidSearchKey): Graveyard
                    + getMatchingKeys(prefix: String): List<String>
                    + getMatchingNames(prefix: String): List<String>
                    + getNearestGraveyard(player: Player): Optional<ValidGraveyard>
                    + getNearestGraveyards(player: Player): List<ValidGraveyard>
                    + getUndiscoveredGraveyards(player: Player): Stream<ValidGraveyard>
                    + getUndiscoveredKeys(sender: CommandSender): Set<String>
                }
            }

            package tasks {
                interface DiscoveryObserver <<manager>> {
                    + cancel()
                    + reload()
                    + runDiscoveryTask()
                }

                class GraveyardDiscoveryObserver <<worker>> {
                    + cancel()
                    + reload()
                    + runDiscoveryTask()
                }

                interface SafetyManager <<manager>> {
                    + isPlayerProtected(player: Player): boolean
                    + putPlayer(player: Player, graveyard: ValidGraveyard)
                    + removePlayer(player: Player)
                }

                class RespawnSafetyManager <<worker>> {
                    + isPlayerProtected(player: Player): boolean
                    + putPlayer(player: Player, graveyard: ValidGraveyard)
                    + removePlayer(player: Player)
                }

                DiscoveryObserver <-- GraveyardDiscoveryObserver
                SafetyManager <-- RespawnSafetyManager
            }
        }

        ' --- adapters ---
        package adapters #ffffff {
            package bukkit.commands {
                class BukkitCommandManager #Khaki {
                	+ create(): CommandManager
                	+ init(ctx: CommandContextContainer): CommandManager
                	--
                	+ onTabComplete(sender: CommandSender, command: Command, alias: String, args: String[]): List<String>
    	            + onCommand(sender: CommandSender, command: Command, label: String, args: String[]): boolean
              }
            }

            package bukkit.listeners {
                class BukkitPlayerEventListener #Khaki {
                    + create(): PlayerEventListener
                	+ init(ctx: ListenerContextContainer): PlayerEventListener
                	--
                    + onPlayerDeath(event: PlayerDeathEvent): void
                    + onEntityTargetLivingEntity(event: EntityTargetLivingEntityEvent): void
                }
            }

            package sqlite.datastore {
                class SqliteConnectionProvider <<repository-adapter>> {
                  + connect(): ConnectionProvider
                  + close(): void
                  --
                  + discoveries(): DiscoveryRepository
                  + graveyards(): GraveyardRepository
                }

                class SqliteDiscoveryRepository <<repository-adapter>> {
                  + save(discovery: ValidDiscovery): boolean
                  + saveAll(discoveries: Collection<ValidDiscovery>): int
                  + delete(searchKey: ValidSearchKey, playerUid: UUID): boolean
                }

                class SqliteGraveyardRepository <<repository-adapter>> {
                    + save(graveyard: ValidGraveyard): Graveyard
                    + saveAll(graveyards: Collection<ValidGraveyard>): int
                    + update(graveyard: ValidGraveyard): Graveyard
                    + update(oldSearchKey: ValidSearchKey, graveyard: ValidGraveyard): Graveyard
                    + delete(searchKey: ValidSearchKey): Graveyard
                    + get(searchKey: ValidSearchKey): Graveyard
                    + getMatchingKeys(prefix: String): List<String>
                    + getMatchingNames(prefix: String): List<String>
                    + getNearestGraveyard(player: Player): Optional<ValidGraveyard>
                    + getNearestGraveyards(player: Player): List<ValidGraveyard>
                    + getUndiscoveredGraveyards(player: Player): Stream<ValidGraveyard>
                    + getUndiscoveredKeys(sender: CommandSender): Set<String>
                }
            }
        }

        package models #fdfffd {
            together {
            package discovery {
                interface Discovery <<entity>> {
                    + of(graveyard: ValidGraveyard, player: Player): Discovery
                    + of(searchKey: ValidSearchKey, playerUid: UUID): Discovery
                }
                class ValidDiscovery <<entity-valid>> {
                    - playerUid: UUID
                    - searchKey: ValidSearchKey
                    --
                    + playerUid(): UUID
                    + searchKey(): ValidSearchKey
                }
                class InvalidDiscovery <<entity-invalid>> {
                    + reason: DiscoveryFailReason
                }
                Discovery <-- ValidDiscovery
                Discovery <-- InvalidDiscovery
            }

            package graveyard {
                interface Graveyard <<entity>> {
                    + of(plugin: Plugin, displayName: ValidDisplayName, player: Player): Graveyard
                    + of(displayName: ValidDisplayName, attributes: Attributes, location: ValidLocation): Graveyard
                    --
                    + displayName(): DisplayName
                    + getDisplayName(): String
                    + worldName(): String
                }
                class ValidGraveyard <<entity-valid>> {
                    + displayName: ValidDisplayName
                    + attributes: Attributes
                    + location: ValidLocation
                    --
                    + getLocation(): Location
                    + public String worldName()
                    + searchKey(): ValidSearchKey
                }
                class InvalidGraveyard <<entity-invalid>> {
                    - displayName: DisplayName
                    - graveyardFailReason: GraveyardFailReason
                    - worldName: String
                    --
                    + displayName(): DisplayName
                    + graveyardFailReason(): GraveyardFailReason
                    + worldName(): String
                }
                Graveyard <-- ValidGraveyard
                Graveyard <-- InvalidGraveyard
            }
            }
'            ValidDiscovery --> Graveyard

            together {
                package displayname {
                    interface DisplayName <<entity>> {
                        + of(string: String): DisplayName
                        + of(args: List<String>): DisplayName
                        + colorString(): String
                        + noColorString(): String
                        + BLANK(): DisplayName
                        + NULL(): DisplayName
                    }
                    class ValidDisplayName <<entity-valid>> {
                        - string: String
                        --
                        + toSearchKey(): ValidSearchKey
                    }
                    class InvalidDisplayName <<entity-invalid>> {
                        - reason: DisplayNameFailReason
                        - string: String
                        --
                        + reason(): DisplayNameFailReason
                        + string(): String
                    }
                    DisplayName <-- ValidDisplayName
                    DisplayName <-- InvalidDisplayName
                }
                package searchkey {
                    interface SearchKey <<entity>>
                    {
                        + of(args: List&lt;String&gt;): SearchKey
                        + of(string: String): SearchKey
                        + string(): String
                        + toDisplayName(): DisplayName
                    }

                    class ValidSearchKey <<entity-valid>>
                    {
                        - string: String
                        --
                        + string(): String
                    }

                    class InvalidSearchKey <<entity-invalid>>
                    {
                        - reason: SearchKeyFailReason
                        - string: String
                        --
                        + reason(): SearchKeyFailReason
                        + string(): String
                    }
                    SearchKey <-- ValidSearchKey
                    SearchKey <-- InvalidSearchKey
                }
                ValidDisplayName --> SearchKey
            }
            ValidDiscovery --> SearchKey

            together {
                package location {
                    interface ConfirmedLocation <<entity>> {
                        + of(player: Player): ValidLocation
                        + of(location: Location): ConfirmedLocation
                        + of(worldName: String, worldUid: UUID, x: double, y: double, z: double, yaw: float, pitch: float): ConfirmedLocation
                    }
                    class ValidLocation <<entity-valid>> {
                        - world: ValidWorld
                        - x: double
                        - y: double
                        - z: double
                        - yaw: float
                        - pitch: float
                        --
                        + world(): ValidWorld
                        + x(): double
                        + y(): double
                        + z(): double
                        + yaw(): float
                        + pitch(): float
                    }
                    class InvalidLocation <<entity-invalid>> {
                        - reason: LocationFailReason
                        --
                        + reason(): LocationFailReason
                    }
                    ConfirmedLocation <-- ValidLocation
                    ConfirmedLocation <-- InvalidLocation
                }
                package world {
                    interface ConfirmedWorld <<entity>> {
                        + of(player: Player): ValidWorld
                        + of(world: World): ConfirmedWorld
                        + of(name: String, uid: UUID): ConfirmedWorld
                    }
                    interface ValidWorld <<entity-valid>> {
                        + name(): String
                        + uid(): UUID
                    }
                    class AvailableWorld <<entity-valid>> {
                        - name: String
                        - uid: UUID
                        --
                        + name(): String
                        + uid(): UUID
                    }
                    class UnavailableWorld <<entity-valid>> {
                        - name: String
                        - uid: UUID
                        --
                        + name(): String
                        + uid(): UUID
                    }
                    class InvalidWorld <<entity-invalid>> {
                        + reason: WorldFailReason
                    }
                    ConfirmedWorld <-- ValidWorld
                    ConfirmedWorld <-- InvalidWorld
                    ValidWorld <-- AvailableWorld
                    ValidWorld <-- UnavailableWorld
                }
                ValidLocation --> ConfirmedWorld
            }
            ValidGraveyard --> DisplayName
            ValidGraveyard --> ConfirmedLocation
        }
    }

' === RELATIONSHIPS ===
' bootstrap
Bootstrap --> PluginController

' core
PluginController <-- SavageGraveyardsPluginController
SavageGraveyardsPluginController --> DiscoveryObserver
SavageGraveyardsPluginController --> SafetyManager

' ports
SavageGraveyardsPluginController --> CommandManager
SavageGraveyardsPluginController --> ConnectionProvider
SavageGraveyardsPluginController --> DiscoveryRepository
SavageGraveyardsPluginController --> GraveyardRepository
SavageGraveyardsPluginController --> PlayerEventListener

' adapters
'BukkitCommandManager --> CommandManager
'BukkitPlayerEventListener --> PlayerEventListener
'SqliteConnectionProvider --> ConnectionProvider
'SqliteDiscoveryRepository --> DiscoveryRepository
'SqliteGraveyardRepository --> GraveyardRepository

CommandManager <-- BukkitCommandManager
PlayerEventListener <-- BukkitPlayerEventListener
ConnectionProvider <-- SqliteConnectionProvider
DiscoveryRepository <-- SqliteDiscoveryRepository
GraveyardRepository <-- SqliteGraveyardRepository

' models
SqliteGraveyardRepository --> Graveyard
SqliteDiscoveryRepository --> Discovery

RespawnSafetyManager -[hidden]-> SqliteDiscoveryRepository
GraveyardDiscoveryObserver -[hidden]-> SqliteDiscoveryRepository
}

@enduml
