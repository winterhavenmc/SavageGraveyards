# SQL queries
GetUserVersion=PRAGMA user_version

EnableForeignKeys=PRAGMA foreign_keys = ON

SelectGraveyardsTable=SELECT * FROM sqlite_master WHERE type='table' AND name='Graveyards'

DropGraveyardsTable=DROP TABLE IF EXISTS Graveyards

DropDiscoveredTable=DROP TABLE IF EXISTS Discovered

CreateGraveyardsTable=\
  CREATE TABLE IF NOT EXISTS Graveyards (\
    Key INTEGER PRIMARY KEY AUTOINCREMENT, \
    SearchKey VARCHAR UNIQUE NOT NULL, \
    DisplayName VARCHAR NOT NULL, \
    Enabled BOOLEAN NOT NULL ON CONFLICT REPLACE DEFAULT 1, \
    Hidden BOOLEAN NOT NULL ON CONFLICT REPLACE DEFAULT 1, \
    DiscoveryRange INTEGER, \
    DiscoveryMessage VARCHAR, \
    RespawnMessage VARCHAR, \
    SafetyRange INTEGER, \
    SafetyTime BIGINT, \
    GroupName VARCHAR, \
    WorldName VARCHAR NOT NULL, \
    WorldUidMsb BIGINT NOT NULL, \
    WorldUidLsb BIGINT NOT NULL, \
    X DOUBLE, \
    Y DOUBLE, \
    Z DOUBLE, \
    Yaw FLOAT, \
    Pitch FLOAT)

CreateDiscoveredTable=\
  CREATE TABLE IF NOT EXISTS Discovered (\
    Key INTEGER NOT NULL REFERENCES Graveyards(Key) ON DELETE CASCADE, \
    PlayerUidMsb BIGINT NOT NULL, \
    PlayerUidLsb BIGINT NOT NULL, \
    PRIMARY KEY (Key, PlayerUidMsb, PlayerUidLsb))

InsertDiscovery=\
  INSERT INTO Discovered (Key, PlayerUidMsb, PlayerUidLsb) \
  VALUES ((SELECT Key FROM Graveyards \
  WHERE LOWER(REPLACE(SearchKey, " ", "_")) = LOWER(REPLACE(?, " ", "_"))),?,?)

#SelectAllDiscoveryRecords=\
#  SELECT Graveyards.SearchKey AS searchKey, \
#         Discovered.playerUidMsb AS playerUidMsb, \
#         Discovered.playerUidLsb AS playerUidLsb, \
#  FROM Discovered INNER JOIN Graveyards ON Graveyards.Key=Discovered.Key \
#  ORDER BY SearchKey

SelectAllDiscoveryRecords=\
  SELECT Discovered.* \
  FROM Discovered \
  INNER JOIN Graveyards ON Graveyards.Key=Discovered.Key \
  ORDER BY Graveyards.SearchKey

SelectAllDiscoveryRecordsV0=\
  SELECT Graveyards.SearchKey AS SearchKey, Discovered.playerUuid AS playerUid \
  FROM Discovered INNER JOIN Graveyards ON Graveyards.Id=Discovered.spawnId \
  ORDER BY SearchKey

SelectGraveyard=SELECT * FROM Graveyards WHERE LOWER(SearchKey) = LOWER(?)

SelectAllGraveyards=SELECT * FROM Graveyards ORDER BY LOWER(SearchKey)

SelectNearestGraveyard=\
  SELECT Graveyards.* FROM Graveyards \
  LEFT JOIN Discovered ON Graveyards.Key = Discovered.Key \
  WHERE Enabled = 1 \
  AND (WorldUidMsb = ? AND WorldUidLsb = ?) \
  AND (Hidden = 0 OR (Discovered.PlayerUidMsb = ? AND Discovered.PlayerUidLsb = ?)) \
  ORDER BY (ABS(x - ?) * ABS(x - ?) + ABS(y - ?) * ABS(y - ?) + ABS(z - ?) * ABS(z - ?)) ASC \
  LIMIT 1;

# Select enabled graveyards in player world that have a discovery record for player, ordered by nearest distance
SelectNearestGraveyards=\
  SELECT Graveyards.* FROM Graveyards \
  LEFT JOIN Discovered ON Graveyards.Key = Discovered.Key \
  WHERE Enabled = 1 \
  AND (WorldUidMsb = ? AND WorldUidLsb = ?) \
  AND (Hidden = 0 OR (Discovered.PlayerUidMsb = ? AND Discovered.PlayerUidLsb = ?)) \
  ORDER BY (POWER(x - ?, 2) + POWER(y - ?, 2) + POWER(z - ?, 2)) ASC

SelectMatchingGraveyardNames=\
  SELECT SearchKey, DisplayName FROM Graveyards \
  WHERE SearchKey LIKE ? COLLATE NOCASE ORDER BY SearchKey

SelectUndiscoveredGraveyards=\
  SELECT DISTINCT Graveyards.* FROM Graveyards \
  WHERE Enabled = 1 AND Hidden = 1 AND WorldUidMsb = ? AND WorldUidLsb = ? AND Graveyards.Key \
  NOT IN (SELECT Discovered.Key FROM Discovered \
  WHERE Discovered.PlayerUidMsb = ? AND Discovered.PlayerUidLsb = ?)

SelectUndiscoveredGraveyardKeys=\
  SELECT DISTINCT Graveyards.SearchKey AS SearchKey FROM Graveyards \
  WHERE Enabled = 1 AND Hidden = 1 AND WorldUidMsb = ? AND WorldUidLsb = ? AND Graveyards.Key \
  NOT IN (SELECT Discovered.Key FROM Discovered \
  WHERE Discovered.PlayerUidMsb = ? AND Discovered.PlayerUidLsb = ?)

InsertGraveyard=INSERT INTO Graveyards \
  (SearchKey, \
  DisplayName, \
  Enabled, \
  Hidden, \
  DiscoveryRange, \
  DiscoveryMessage, \
  RespawnMessage, \
  GroupName, \
  SafetyRange, \
  SafetyTime, \
  WorldName, \
  WorldUidMsb, \
  WorldUidLsb, \
  X, \
  Y, \
  Z, \
  Yaw, \
  Pitch) \
  values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)

UpdateGraveyard=UPDATE Graveyards SET \
  SearchKey=?, \
  DisplayName=?, \
  Enabled=?, \
  Hidden=?, \
  DiscoveryRange=?, \
  DiscoveryMessage=?, \
  RespawnMessage=?, \
  GroupName=?, \
  SafetyRange=?, \
  SafetyTime=?, \
  WorldName=?, \
  WorldUidMsb=?, \
  WorldUidLsb=?, \
  X=?, \
  Y=?, \
  Z=?, \
  Yaw=?, \
  Pitch=? \
  WHERE Key = ?

DeleteGraveyard=DELETE FROM Graveyards WHERE LOWER(SearchKey) = LOWER(?)

DeleteDiscovery=\
  DELETE FROM Discovered \
  WHERE Discovered.PlayerUidMsb = ? \
  AND Discovered.PlayerUidLsb = ? \
  AND Discovered.Key \
  IN (SELECT Graveyards.Key \
    FROM Graveyards \
    WHERE LOWER(REPLACE(Graveyards.SearchKey, " ", "_")) = LOWER(REPLACE(?, " ", "_")))

SelectGraveyardsKnownByPlayer=\
  SELECT * FROM Graveyards \
  WHERE Graveyards.Key \
  IN (SELECT Discovered.Key \
    FROM Discovered \
    WHERE PlayerUidMsb = ? AND PlayerUidLsb = ?)

SelectPlayersWithDiscovery=SELECT PlayerUidMsb, PlayerUidLsb FROM Discovered

SelectGraveyardCount=SELECT COUNT(DISTINCT SearchKey) AS GraveyardCount FROM Graveyards
